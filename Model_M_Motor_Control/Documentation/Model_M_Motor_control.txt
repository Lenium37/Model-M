=============================================================================
List of generated methods in project: Model_M_Motor_control

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Servo"     (component PWM)
   - Servo_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Servo_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - Servo_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "MotorLinks" (component PWM)
   - MotorLinks_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - MotorLinks_Disable -This method disables the component - it stops the signal generation and events calling. When the timer 
                is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - MotorLinks_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "MotorRechts" (component PWM)
   - MotorRechts_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - MotorRechts_Disable -This method disables the component - it stops the signal generation and events calling. When the 
                timer is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - MotorRechts_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "EN"        (component LED)
   - EN_Init -Performs the LED driver initialization.
   - EN_On -This turns the LED on.
   - EN_Off -This turns the LED off.
   - EN_Neg -This negates/toggles the LED
   - EN_Get -This returns logical 1 in case the LED is on, 0 otherwise.

Module "Potis"     (component ADC)
   - Potis_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - Potis_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - Potis_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - Potis_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - Potis_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.
   - Potis_GetCalibrationStatus -This method should be used for check the last calibration result, return value is invalid if 
                no calibration is called.

Module "SW1"       (component BitsIO)
   - SW1_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of the 
                pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> property 
                for limitations).

Module "SW2"       (component BitsIO)
   - SW2_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of the 
                pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> property 
                for limitations).

Module "SW3"       (component BitsIO)
   - SW3_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of the 
                pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> property 
                for limitations).

Module "SW4"       (component BitsIO)
   - SW4_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of the 
                pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> property 
                for limitations).

Module "LED1"      (component LED)
   - LED1_Init -Performs the LED driver initialization.
   - LED1_Deinit -Deinitializes the driver
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.
   - LED1_Neg -This negates/toggles the LED

Module "LED2"      (component LED)
   - LED2_Init -Performs the LED driver initialization.
   - LED2_Deinit -Deinitializes the driver
   - LED2_On -This turns the LED on.
   - LED2_Off -This turns the LED off.
   - LED2_Neg -This negates/toggles the LED

Module "LED3"      (component LED)
   - LED3_Init -Performs the LED driver initialization.
   - LED3_Deinit -Deinitializes the driver
   - LED3_On -This turns the LED on.
   - LED3_Off -This turns the LED off.
   - LED3_Neg -This negates/toggles the LED

Module "LED4"      (component LED)
   - LED4_Init -Performs the LED driver initialization.
   - LED4_Deinit -Deinitializes the driver
   - LED4_On -This turns the LED on.
   - LED4_Off -This turns the LED off.
   - LED4_Neg -This negates/toggles the LED

Module "TasterA"   (component BitsIO)
   - TasterA_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).

Module "TasterB"   (component BitsIO)
   - TasterB_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).

Module "CLK"       (component LED)
   - CLK_Init -Performs the LED driver initialization.
   - CLK_On -This turns the LED on.
   - CLK_Off -This turns the LED off.
   - CLK_Neg -This negates/toggles the LED

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for approximately 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for 100 CPU cycles.
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU2_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU2_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU2_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU2_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU2_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU2_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU2_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "RechtsINT" (component ExtInt)
   - RechtsINT_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - RechtsINT_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - RechtsINT_GetVal -Returns the actual value of the input pin of the component.

Module "I2C1"      (component InternalI2C)
   - I2C1_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - I2C1_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - I2C1_ClearTxBuf -This method clears all characters in internal slave output buffer. This method is not available for the 
                MASTER mode.
   - I2C1_ClearRxBuf -This method clears all characters in internal slave input buffer. This method is not available for the 
                MASTER mode.
   - I2C1_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.
   - I2C1_SetMode -This method sets actual operating mode of this component. This method is available only for the MASTER - 
                SLAVE mode.  Note: If MASTER mode is selected as an operating mode, the device can still be selected as a slave 
                and receive/transmit data. However, it's necessary to select slave operating mode using SetMode( FALSE ) to 
                access this data.

Module "CsIO1"     (component ConsoleIO)

Module "SI"        (component BitIO)
   - SI_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - SI_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - SI_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - SI_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Send_OK"   (component LED)
   - Send_OK_Init -Performs the LED driver initialization.
   - Send_OK_Deinit -Deinitializes the driver
   - Send_OK_On -This turns the LED on.
   - Send_OK_Off -This turns the LED off.
   - Send_OK_Neg -This negates/toggles the LED

Module "MotorLinks_Rev" (component PWM)
   - MotorLinks_Rev_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - MotorLinks_Rev_Disable -This method disables the component - it stops the signal generation and events calling. When the 
                timer is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - MotorLinks_Rev_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number.
                0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - MotorLinks_Rev_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds 
                as a 16-bit unsigned integer number. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.
   - MotorLinks_Rev_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds 
                as a 16-bit unsigned integer number. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.

Module "MotorRechts_Rev" (component PWM)
   - MotorRechts_Rev_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - MotorRechts_Rev_Disable -This method disables the component - it stops the signal generation and events calling. When the 
                timer is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - MotorRechts_Rev_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - MotorRechts_Rev_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds 
                as a 16-bit unsigned integer number. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.
   - MotorRechts_Rev_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds 
                as a 16-bit unsigned integer number. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.

Module "LinksINT"  (component ExtInt)
   - LinksINT_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - LinksINT_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - LinksINT_GetVal -Returns the actual value of the input pin of the component.

Module "TU3"       (component TimerUnit_LDD)
   - TU3_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU3_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU3_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU3_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU3_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
